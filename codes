______________________________________________ingress.yaml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nodejs-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: nodejs.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nodejs-service
                port:
                  number: 3000



_______________________________________________________service.yaml

apiVersion: v1
kind: Service
metadata:
  name: nodejs-service
spec:
  type: NodePort
  selector:
    app: nodejs-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
      nodePort: 30007

___________________________________________________________deployement.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nodejs-app
  template:
    metadata:
      labels:
        app: nodejs-app
    spec:
      containers:
        - name: nodejs-app
          image: kushal2022bcs0098/my-nodeapp
          ports:
            - containerPort: 3000
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"

______________________________________________________________________server.js

const http=require('http')
const server=http.createServer((req,res)=>{
res.end('Hello world from node')
})
server.listen(3000,()=>{
console.log('server is running at port 3000')
})

_________________________________________________________________________Dockerfile node

FROM node:latest
WORKDIR /app
COPY . .
CMD ["node","server.js"]
EXPOSE 3000

_____________________________________________________________________________main.go

package main

import (
        "fmt"
        "net/http"
)

func hello(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintln(w, "Hello from Golang")
}

func main() {
        http.HandleFunc("/", hello)
        fmt.Println("Server is running at port 8080")
        http.ListenAndServe(":8080", nil)
}

__________________________________________________________________________________________Docker go

FROM golang:1.22-alpine
WORKDIR /app
COPY . .
RUN go build -o main .
EXPOSE 8080
CMD ["./main"]

_____________________________________________________________________________________________mongodb node
const { MongoClient } = require("mongodb");

async function main() {
    const client = new MongoClient("mongodb://localhost:27017");
    try {
        await client.connect();
        console.log("Connected to MongoDB");

        const db = client.db("mydatabase");
        const collection = db.collection("users");

        const result1 = await collection.insertOne({ name: "Aslam", age: 21, city: "Bengaluru", rollno: "2022BCS0902" });
        const result2 = await collection.insertOne({ name: "Sai Charan", age: 21, city: "Hyderabad", rollno: "2022BCD8029" });

        console.log("Inserted:", result1.insertedId);
        console.log("Inserted:", result2.insertedId);
    } finally {
        await client.close();
    }
}

main();
